services:
  # database services
  redis-node-0:
    image: docker.io/bitnami/redis-cluster:7.4
    volumes:
      - redis-cluster_data-0:/bitnami/redis/data
    environment:
      - "REDIS_PASSWORD=bitnami"
      - "REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5"
    networks:
      - onlysaid-network
    restart: always

  redis-node-1:
    image: docker.io/bitnami/redis-cluster:7.4
    volumes:
      - redis-cluster_data-1:/bitnami/redis/data
    environment:
      - "REDIS_PASSWORD=bitnami"
      - "REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5"
    networks:
      - onlysaid-network
    restart: always

  redis-node-2:
    image: docker.io/bitnami/redis-cluster:7.4
    volumes:
      - redis-cluster_data-2:/bitnami/redis/data
    environment:
      - "REDIS_PASSWORD=bitnami"
      - "REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5"
    networks:
      - onlysaid-network
    restart: always

  redis-node-3:
    image: docker.io/bitnami/redis-cluster:7.4
    volumes:
      - redis-cluster_data-3:/bitnami/redis/data
    environment:
      - "REDIS_PASSWORD=bitnami"
      - "REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5"
    networks:
      - onlysaid-network
    restart: always

  redis-node-4:
    image: docker.io/bitnami/redis-cluster:7.4
    volumes:
      - redis-cluster_data-4:/bitnami/redis/data
    environment:
      - "REDIS_PASSWORD=bitnami"
      - "REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5"
    networks:
      - onlysaid-network
    restart: always

  redis-node-5:
    image: docker.io/bitnami/redis-cluster:7.4
    volumes:
      - redis-cluster_data-5:/bitnami/redis/data
    depends_on:
      - redis-node-0
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
    environment:
      - "REDIS_PASSWORD=bitnami"
      - "REDISCLI_AUTH=bitnami"
      - "REDIS_CLUSTER_REPLICAS=1"
      - "REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5"
      - "REDIS_CLUSTER_CREATOR=yes"
    networks:
      - onlysaid-network
    restart: always

  onlysaid-psqldb:
    image: postgres:latest
    container_name: onlysaid-psqldb
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_seeds:/docker-entrypoint-initdb.d
    networks:
      - onlysaid-network
    restart: always

  onlysaid-qdrant:
    image: qdrant/qdrant
    container_name: onlysaid-qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - onlysaid-network
    restart: always

  # # main application services
  onlysaid-chat_server:
    build:
      context: server/chat_server
      dockerfile: Dockerfile.chat_server
    container_name: onlysaid-chat_server
    ports:
      - "3001:3001"
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CLIENT_URL=${CLIENT_URL}
      - NODE_ENV=${NODE_ENV}
    restart: always
    volumes:
      - ./server/chat_server:/app
    depends_on:
      - onlysaid-psqldb
      - redis-node-5
    networks:
      - onlysaid-network
  onlysaid-app:
    build:
      context: .
      dockerfile: docker/Dockerfile.next.prod
    container_name: onlysaid-app
    environment:
      - NEXT_PUBLIC_VERSION=${NEXT_PUBLIC_VERSION}
      - NEXT_AUTH_URL=${NEXT_AUTH_URL}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - PGHOST=${PGHOST}
      - PGDATABASE=${PGDATABASE}
      - PGPORT=${PGPORT}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GITHUB_ID=${GITHUB_ID}
      - GITHUB_SECRET=${GITHUB_SECRET}
      - NEXT_PUBLIC_KB_URL=${KB_URL}
      - NEXT_PUBLIC_MCP_CLIENT_URL=${MCP_CLIENT_URL}
      - NEXT_PUBLIC_OPENAI_API_KEY=${OPENAI_API_KEY}
      - NEXT_PUBLIC_OPENAI_API_BASE_URL=${OPENAI_API_BASE_URL}
    # volumes:
    #   - .:/app
    restart: always
    command: sh -c "npm run build && npm start"
    depends_on:
      - onlysaid-chat_server
      - onlysaid-psqldb
    networks:
      - onlysaid-network

  # mcp
  onlysaid-mcp_client:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp.client
    container_name: onlysaid-mcp_client
    depends_on:
      - onlysaid-chat_server
      - onlysaid-psqldb
      - onlysaid-app
      - onlysaid-ollama
    ports:
      - "34430:34430"
    volumes:
      - ./mcp/client:/app
      - ./mcp/servers:/servers
      - ./mcp/agent_home:/agent_home
      - .env:/servers/.env
    environment:
      - MCP_SERVERS_JSON=/app/mcp_server.json
      - SOCKET_SERVER_URL=${SOCKET_SERVER_URL}
      - CLIENT_URL=${CLIENT_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE_URL=${OPENAI_API_BASE_URL}
      - EMBED_MODEL=nomic-embed-text:latest
      - TAVILY_API_KEY=${TAVILY_API_KEY}
    networks:
      - onlysaid-network
    restart: always

  onlysaid-kb:
    build:
      context: .
      dockerfile: docker/Dockerfile.kb
    container_name: onlysaid-kb
    volumes:
      - ./knowledge_base:/app
      - qdrant_data:/qdrant/storage
    ports:
      - "35430:35430"
    depends_on:
      - onlysaid-qdrant
    environment:
      - EMBED_MODEL=nomic-embed-text:latest
      - OLLAMA_MODEL=gemma3:4b
      - OLLAMA_API_BASE_URL=http://onlysaid-ollama:11434
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE_URL=${OPENAI_API_BASE_URL}
      - OPENAI_MODEL=${OPENAI_MODEL}
    networks:
      - onlysaid-network
    restart: always

  onlysaid-ollama:
    image: ollama/ollama:latest
    container_name: onlysaid-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - onlysaid-network
    restart: always

  # supporting services
  onlysaid-nginx:
    image: nginx:latest
    container_name: onlysaid-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - onlysaid-app
      - onlysaid-chat_server
      - onlysaid-mcp_client
    networks:
      - onlysaid-network
    restart: always

  onlysaid-pgadmin:
    image: dpage/pgadmin4
    container_name: onlysaid-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - onlysaid-psqldb
    networks:
      - onlysaid-network
    restart: always

volumes:
  postgres_data:
  qdrant_data:
  ollama_data:
  redis-cluster_data-0:
    driver: local
  redis-cluster_data-1:
    driver: local
  redis-cluster_data-2:
    driver: local
  redis-cluster_data-3:
    driver: local
  redis-cluster_data-4:
    driver: local
  redis-cluster_data-5:
    driver: local

networks:
  onlysaid-network:
    name: onlysaid-network
    driver: bridge
